import datetime
import enum
import sqlite3

from flask import Blueprint, render_template, redirect
from flask_wtf import FlaskForm
from pydantic import BaseModel, Field
from wtforms.fields.choices import SelectMultipleField
from wtforms.fields.numeric import IntegerRangeField, DecimalRangeField
from wtforms.fields.simple import StringField, BooleanField, URLField, TextAreaField
from wtforms.validators import InputRequired


class PriceRange(enum.IntEnum):
    LOW = 0
    AVG = 1
    HIGH = 2


class RestTag(enum.StrEnum):
    # –ê–∑–∏—è
    Chinese = "–ö–∏—Ç–∞–π–∫–∞üÄÑ"
    Viet = "–í—å–µ—Ç–Ω–∞–º–∫–∞ü•ã"
    Korean = "–ö–æ—Ä–µ–π–∫–∞üëò"
    # –†–∞–º–µ–Ω, –£–¥–æ–Ω
    Noodles = "–õ–∞–ø—à–∞üçú"
    Sushi = "–°—É—à–∏üç£"
    Indian = "–ò–Ω–¥–∏–π–∫–∞ ü™∑"
    # –ü–∏—Ü—Ü–∞, –ø–∞—Å—Ç–∞, —Å–∞–ª–∞—Ç–∏–∫–∏
    Italia = "–ò—Ç–∞–ª–∏—è üí∂"
    # –ü–µ–ª—å–º–µ–Ω–∏, –ß–µ–±—É—Ä–µ–∫–∏
    Russian = "–†—É—Å—Å–∫–∞—è"
    # –ü–ª–µ—Å–∫–∞–≤–∏—Ü—ã
    Serbian = "–°–µ—Ä–±–∏—è"
    # –®–∞—É—Ä–º–∞, –ë—É—Ä–≥–µ—Ä—ã
    StreetFood = "–°—Ç—Ä–∏—Ç—Ñ—É–¥ü•ô"
    Soup = "–°—É–ø—ãüç≤"
    # –ò–∑—Ä–∞–∏–ª—å—Å–∫–∞—è, –¢—É—Ä–µ—Ü–∫–∞—è, –ö–µ–±–∞–±—ã, –•—É–º—É—Å—ã
    MiddleEast = "–í–æ—Å—Ç–æ—á–Ω–∞—èüßÜ"
    # –•–∏–Ω–∫–∞–ª–∏, —Ö–∞—á–∞–ø—É—Ä–∏
    Georgian = "–ì—Ä—É–∑–∏–Ω–∫–∞"
    # –£–∑–±–µ–∫—Å–∫–∞—è: –º–∞–Ω—Ç—ã, –ª–∞–≥–º–∞–Ω, —à—É—Ä–ø–∞
    Chaihona = "–ß–∞–π—Ö–∞–Ω–∞üçñ"
    Sweets = "–î–µ—Å–µ—Ä—Ç—ãüçÆ"
    Gastro = "–ì–∞—Å—Ç—Ä–æ-–±–∞—Ä üç∑"
    Beer = "–ü–∏–≤–Ω—É—Ö–∞ üç∫"
    Brandy = "–ù–∞—Å—Ç–æ–π–∫–∏üç∑"
    # –†—ã–±–∞, –∫—Ä–µ–≤–µ—Ç–∫–∏, –º–∏–¥–∏–∏
    Seafood = "–ú–æ—Ä—Å–∫–∏–µ –≥–∞–¥—ãüêü"
    # –°—Ç–µ–π–∫–∏, —à–∞—à–ª—ã–∫–∏
    Meat = "–ú—è—Å–æüçñ"
    Lunch = "–û–±–µ–¥ / –°—Ç–æ–ª–æ–≤–∫–∞"
    FixPrice = "–§–∏–∫—Å-–ø—Ä–∞–π—Å"
    FoodCourt = "–§—É–¥-–ö–æ—Ä—Ç"
    Chain = "–°–µ—Ç–µ–≤—É—Ö–∞üï∏"
    Company = "–î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏üçª"
    Wtf = "–î–∏—á—å"


class Restaurant(BaseModel):
    id: int | None = None
    name: str
    score: float | None
    created: datetime.datetime = Field(default_factory=datetime.datetime.now)
    url: str | None
    visited: bool
    location: list[str]
    price_range: str | PriceRange | None
    tags: list[str | RestTag]
    comment: str | None


class RestaurantStorage:
    def __init__(self, sqlite_cur: sqlite3.Cursor) -> None:
        self.sqlite_cur = sqlite_cur

    def list_all(self, filters=None):
        q = "select id, name, score, created, url, visited, location, price_range, tags, comment from restaurants"

        if filters is not None:
            q += f" where {filters}"

        raw_restaurants = self.sqlite_cur.execute(q).fetchall()
        restaurants = [
            Restaurant(
                id=id,
                name=name,
                score=score,
                created=created,
                url=url,
                visited=visited,
                location=location.split(","),
                price_range=price_range,
                tags=tags.split(","),
                comment=comment,
            )
            for id, name, score, created, url, visited, location, price_range, tags, comment in raw_restaurants
        ]
        return restaurants

    def insert(self, rest: Restaurant):
        rest_values = (
            rest.name,
            rest.score,
            rest.created,
            rest.url,
            rest.visited,
            ",".join(rest.location),
            rest.price_range,
            ",".join(rest.tags),
            rest.comment,
        )
        self.sqlite_cur.execute(
            """
                insert into restaurants (name, score, created, url, visited, location, price_range, tags, comment)
                values (?, ?, ?, ?, ?, ?, ?, ?, ?);
                """,
            rest_values,
        )
        self.sqlite_cur.connection.commit()


class AddRestForm(FlaskForm):
    name = StringField("–ù–∞–∑–≤–∞–Ω–∏–µ", validators=[InputRequired()], render_kw=dict(placeholder='–¢—Ö–∞–ª–∏ –∏ –ö–∞—Ä—Ä–∏'))
    score = DecimalRangeField(
        "–û—Ü–µ–Ω–∫–∞",
        validators=[InputRequired()],
        render_kw={"min": 0, "max": 10, "step": 0.5, 'class': 'range-primary'},
        default=7.5,
    )
    url = URLField("–°—Å—ã–ª–∫–∞", render_kw={'placeholder': 'https://yandex.ru/maps/org/tkhali_i_karri/154048393265'})
    visited = BooleanField("–ë—ã–ª–∏?", default=True)
    location = StringField("–ú–µ—Å—Ç–æ", validators=[InputRequired()], render_kw={'placeholder': '–ü—É—à–∫–∞'})
    price_range = IntegerRangeField(
        "–¶–µ–Ω—ã", render_kw={"min": 0, "max": 2, "steps": ["–ù–∏–∑–∫–∏–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–í—ã—Å–æ–∫–∏–µ"], 'class': 'range-accent'}
    )
    tags = SelectMultipleField(
        "–¢–µ–≥–∏",
        validators=[InputRequired()],
        choices=RestTag.__members__.values(),
    )
    comment = TextAreaField("–ö–æ–º–º–µ–Ω—Ç", validators=[InputRequired()], render_kw={'placeholder': '–ù–µ–ø–ª–æ—Ö–∞—è –∏–Ω–¥–∏–π–∫–∞'})


def make_restaurants_blueprint(
    sqlite_cur: sqlite3.Cursor,
):
    restaurants_blueprint = Blueprint("restaurants_blueprint", __name__)

    storage = RestaurantStorage(sqlite_cur)

    @restaurants_blueprint.route("/special/where-to-eat")
    def get_where_to_eat():
        restaurants = storage.list_all("visited = 1")
        restaurants = sorted(restaurants, key=lambda r: r.score, reverse=True)

        return render_template(
            f"special/where-to-eat.html",
            show_title=True,
            show_desc=True,
            restaurants=restaurants,
        )

    @restaurants_blueprint.route("/special/rest/add", methods=["GET", "POST"])
    def rest_add():
        form = AddRestForm()

        if form.validate_on_submit():
            form_data = form.data
            form_data["location"] = [form_data["location"]]
            rest = Restaurant(**form_data)
            storage.insert(rest)
            return redirect("/special/where-to-eat")

        return render_template("special/rest/add.html", form=form)

    return restaurants_blueprint
